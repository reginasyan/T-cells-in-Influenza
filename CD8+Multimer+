# set seed and install libraries
set.seed(123)
library(flowCore)
library(flowViz)
library(flowVS)
library(flowAI)
library(PeacoQC)
library(CATALYST)
library(CytoNorm)
library(SingleCellExperiment)
library(uwot)
library(knitr)
library(xlsx)
library("flowCore")
library("flowCut")
library(ggcyto)

#directories

setwd("~/Regina/IVA")

fcs.dir<- file.path(getwd(), "02_data/patient_2_3/Multimer") 
fcs_data <- read.flowSet(path=fcs.dir, pattern="*.fcs", transformation = FALSE, truncate_max_range = FALSE)


# data frame of the panel

fcs_colname <- colnames(fcs_data)
marker_class <- rep("none", ncol(fcs_data[[1]]))
marker_type <- c(8:28,31:43)
marker_class[marker_type] <- "type" # markers that indicate surface markers, such as CD3, CD4, or markers that you do want to use for clustering
marker_class <- factor(marker_class, levels=c("type", "none"))
antigen <- pData(parameters(fcs_data[[1]]))$desc

panel <- data.frame(fcs_colname, antigen, marker_class, row.names = NULL)
write.xlsx(panel, file="C:/Users/Admin/Documents/Regina/IVA/04_exports/panel.xlsx", sheetName="Panel")


#creating the metadata
files <- list.files("./02_data/patient_2_3/Multimer", 
                    pattern = "fcs",
                    full.names = TRUE)
file_name <- fsApply(fcs_data, identifier)
md <- data.frame(file_name = file_name)
md$sample_id <- gsub("\\.fcs", "", basename(md$file_name))
md$patient <- sapply(strsplit(md$sample_id, " - "), function(x) x[1])
md$experiment <- sapply(strsplit(md$sample_id, " - "), function(x) x[2])
md$cells <- sapply(strsplit(md$sample_id, " - "), function(x) x[3])
md$experiment_cells <- paste(md$experiment, md$cells, sep = "_")
rownames(md)  <- NULL
kable(md)

fcs_data <- fcs_data[c(1,3,5,7,9,11)] #only total CD8+ cells
md <- md[c(1,3,5,7,9,11),] #only total CD8+ cells

#downsample the data
markerstotransform <- panel$fcs_colname[c(8:28,31:43)] 

Downsampling_FlowSet <- function(x, samplesize , replace=TRUE, prob=NULL){
  if(missing(samplesize))
    samplesize <- min(flowCore::fsApply(x,nrow))
  flowCore::fsApply(x, function(ff){
    i <- sample(nrow(ff), size = samplesize, replace=replace, prob)
    ff[i,]
  })
}

fcs_data_small <- Downsampling_FlowSet(x=fcs_data, samplesize = 2000)

#inspect the data to decide which type of transformation suits better
expression_data <- fcs_data[[1]]
expression_data <- expression_data@exprs


#tranform the data with FlowVS
cofactors <- estParamFlowVS(fcs_data_small, channels=markerstotransform)
saveRDS(cofactors, file = "C:/Users/Admin/Documents/Regina/IVA/04_exports/cofactors.rds")
cofactors <- readRDS(file = "C:/Users/Admin/Documents/Regina/IVA/04_exports/cofactors.rds")
cofactordata <- data.frame(markerstotransform, cofactors)
write.csv(x=cofactordata, file="C:/Users/Admin/Documents/Regina/IVA/04_exports/cofactordata_Multimer_CD8+.csv") #csv file
write.xlsx(x=cofactordata, file="C:/Users/Admin/Documents/Regina/IVA/04_exports/cofactordata_Multimer_CD8+.xlsx", sheet="cofactordata_A")

fcs_transform <- transFlowVS(fcs_data, channels = markerstotransform, cofactors)
filenames <- sampleNames(fcs_data)
sampleNames(fcs_transform) <- filenames


# Open the PDF device
pdf("C:/Users/Admin/Documents/Regina/IVA/03_figures/Density_plot_transformation_FlowFS_cofactors_CD8+_in_multimer_experiment.pdf")

# Create the density plot
densityplot(~., fcs_data[[1]])
densityplot(~., fcs_transform[[1]])

# Close the PDF device to save the file
dev.off()

# Loop for the QC by flowCut
for (i in 1:6) {
  file_name <- basename(fcs_transform[[i]]@description$FILENAME)
  # Apply the flowCut function for each sample
  res_flowCut <- flowCut(fcs_transform[[i]], FileID = file_name, Plot = "All", Segment = 1000)
  
  # Optionally, print the result or save it
  print(paste("Results for sample", i))
  print(res_flowCut$data)
  
}

Subsampling_FlowSet <- function(x, fraction, md){
  b <- round(fraction*length(x), digits=0)
  
  listq <- sample(x=length(x), b, replace=FALSE)
  listq <- sort(listq)
  
  fcs_train<-x[c(listq)]
  
  md_train <- md[c(listq),]
  
  
  fcs_train <<- fcs_train
  md_train <<- md_train
  
  listy <- 1:length(x)
  
  listz <- subset(listy, !(listy %in% listq))
  
  listz <- sort(listz)
  
  fcs_test <- x[c(listz)]
  
  md_test <- md[c(listz),]
  
  fcs_test <<- fcs_test
  md_test <<- md_test
  
}

Subsampling_FlowSet(fcs_transform, 0.25, md=md) #test and train set are created

#UMAP

sce_train <- prepData(fcs_train, md=md_train, panel= panel, FACS = TRUE, transform=FALSE, md_cols =list(file="file_name", id="patient", factors=c("cells", "experiment", "experiment_cells")))
assayNames(sce_train)[1] <- "exprs"

exprs_train <- assay(sce_train, "exprs")
exprs_train <- t(exprs_train)
exprs_train <- exprs_train[,c(marker_type)] #markers you want to use for clustering, you can also use marker_state or marker_type

set.seed(1234)

umap_train <- uwot::umap(exprs_train, n_neighbors=100, min_dist = 0.5, ret_model = TRUE)
reducedDim(sce_train, "UMAP")<- umap_train$embedding
plotDR(sce_train, "UMAP", color_by="experiment")

#add other samples to the UMAP

sce_test <-prepData(fcs_test, md=md_test, panel= panel, FACS = TRUE, transform=FALSE, md_cols =list(file="file_name", id="patient", factors=c("cells", "experiment", "experiment_cells")))
assayNames(sce_test)[1] <- "exprs"

exprs_test <- assay(sce_test, "exprs")
exprs_test <- t(exprs_test)
exprs_test <- exprs_test[,c(marker_type)]

umap_test <- uwot::umap_transform(exprs_test, umap_train)

reducedDim(sce_train, "UMAP")<- NULL

umap_total <- rbind(umap_train$embedding, umap_test)

sce_total <- cbind(sce_train, sce_test)

reducedDim(sce_total, "UMAP") <- umap_total

plotDR(sce_total, "UMAP", color_by = "experiment")
plotDR(sce_total, "UMAP", color_by = "sample_id")
plotDR(sce_total, "UMAP", color_by = "Multimer")

#create the gating strategy for Multimer+ cells
autoplot(fcs_transform, "PE-A", "SSC-A")
autoplot(fcs_transform,  "PE-A")

rectGate <- rectangleGate(filterId = "Multimer+", "PE-A"=c(1.5, 12))
result = filter(fcs_transform[[2]], rectGate)
summary(result)

filter(fcs_transform, rectGate)

#create the gating set
gs <- GatingSet(fcs_transform)
gs_pop_add(gs, rectGate, parent = "root")
recompute(gs)

autoplot(gs, "Multimer+")

ggcyto(gs, aes(x = `PE-A`)) + geom_density() + geom_gate("Multimer+")

stats <- gs_pop_get_stats(gs, "Multimer+")
head(stats)

#Mapping of multimer+ cells on UMAP
exprs_data <- sce_total@assays@data$exprs
colData(sce_total)$Gating <- ifelse( exprs_data[31,] >= 1.5,"Multimer+","Non-multimer")

plotDR(sce_total, "UMAP", color_by = "Gating")

#Subset Multimer+ cells in a separate object
sce_multimer <- sce_total[,sce_total@colData$Gating =="Multimer+"]

#Multimer+ cells 

exprs_multimer <- assay(sce_multimer, "exprs")
exprs_multimer <- t(exprs_multimer)
exprs_multimer <- exprs_multimer[,c(marker_type)] #markers you want to use for clustering, you can also use marker_state or marker_type


set.seed(7460)
umap <- umap(exprs_multimer, n_neighbors=50, min_dist = 0.5, ret_model = TRUE)
reducedDim(sce_multimer, "UMAP")<- umap$embedding
plotDR(sce_multimer, "UMAP", color_by="sample_id")
plotDR(sce_multimer, "UMAP", color_by="experiment")
plotDR(sce_multimer, "UMAP", color_by="CD26")
plotDR(sce_multimer, "UMAP", color_by="CD73")
plotDR(sce, "UMAP", color_by="CCR7")

