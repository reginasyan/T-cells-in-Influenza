# set seed and install libraries
set.seed(123)
library(flowCore)
library(flowViz)
library(flowVS)
library(flowAI)
library(PeacoQC)
library(CATALYST)
library(CytoNorm)
library(SingleCellExperiment)
library(uwot)
library(knitr)
library(xlsx)
library("flowCore")
library("flowCut")
library(ggcyto)
library(clustree)
library(cytoMEM)

#directories

setwd("~/Regina/IVA")

fcs.dir<- file.path(getwd(), "02_data/patient_2_3/Multimer") 
fcs_data <- read.flowSet(path=fcs.dir, pattern="*.fcs", transformation = FALSE, truncate_max_range = FALSE)


# data frame of the panel

fcs_colname <- colnames(fcs_data)
marker_class <- rep("none", ncol(fcs_data[[1]]))
marker_type <- c(8:28,31:43)
marker_class[marker_type] <- "type" # markers that indicate surface markers, such as CD3, CD4, or markers that you do want to use for clustering
marker_class <- factor(marker_class, levels=c("type", "none"))
antigen <- pData(parameters(fcs_data[[1]]))$desc

panel <- data.frame(fcs_colname, antigen, marker_class, row.names = NULL)


#creating the metadata
files <- list.files("./02_data/patient_2_3/Multimer", 
                    pattern = "fcs",
                    full.names = TRUE)
file_name <- fsApply(fcs_data, identifier)
md <- data.frame(file_name = file_name)
md$sample_id <- gsub("\\.fcs", "", basename(md$file_name))
md$patient <- sapply(strsplit(md$sample_id, " - "), function(x) x[1])
md$experiment <- sapply(strsplit(md$sample_id, " - "), function(x) x[2])
md$cells <- sapply(strsplit(md$sample_id, " - "), function(x) x[3])
md$experiment_cells <- paste(md$experiment, md$cells, sep = "_")
rownames(md)  <- NULL
kable(md)

fcs_data <- fcs_data[c(1,3,5,7,9,11)] #only total CD8+ cells
md <- md[c(1,3,5,7,9,11),] #only total CD8+ cells

#downsample the data
markerstotransform <- panel$fcs_colname[c(8:28,31:43)] 


#tranform the data with FlowVS

cofactors <- readRDS(file = "C:/Users/Admin/Documents/Regina/IVA/04_exports/cofactors.rds")
cofactordata <- data.frame(markerstotransform, cofactors)

fcs_transform <- transFlowVS(fcs_data, channels = markerstotransform, cofactors)
filenames <- sampleNames(fcs_data)
sampleNames(fcs_transform) <- filenames

# Loop for the QC by flowCut
for (i in 1:6) {
  file_name <- basename(fcs_transform[[i]]@description$FILENAME)
  # Apply the flowCut function for each sample
  res_flowCut <- flowCut(fcs_transform[[i]], FileID = file_name, Plot = "All", Segment = 1000)
  
  # Optionally, print the result or save it
  print(paste("Results for sample", i))
  print(res_flowCut$data)
  
}

#filtering Multimer+ cells
filtered_flowFrames <- list()

for (i in seq_along(fcs_transform)) {
  # Access the expression data from the current flowFrame
  exprs_data <- exprs(fcs_transform[[i]])
  rownames(exprs_data) <- 1:nrow(exprs_data)
  
  # Get the sample name using sampleNames() or other methods
  sample_id <- sampleNames(fcs_transform)[i]
  
  # Create a gating column to classify cells
  gating <- rep("Non-multimer", nrow(exprs_data))  # Initialize all as Non-multimer
  
  # Apply threshold for sample "24-060"
  if (grepl("24-060", sample_id)) {
    gating[exprs_data[, "PE-A"] >= 1.5 & exprs_data[, "cFluor B548-A"] > 0.75] <- "Multimer+"  # Apply threshold
  } else if (grepl("24-073", sample_id)) {
    # Apply threshold for sample "24-073"
    gating[exprs_data[, "PE-A"] >= 1.7 & exprs_data[, "cFluor B548-A"] > 0.75] <- "Multimer+"
  }
  
  # Add the gating result as a new column to the expression matrix
  exprs_data <- cbind(exprs_data, gating)  # Add gating as new column
  # Filter for Multimer+ cells only
  #filtered_data <- exprs_data[exprs_data[, ncol(exprs_data)] == "Multimer+", ]

  
  # Filter for Multimer+ cells only
  filtered_data <- exprs_data[exprs_data[, "gating"] == "Multimer+", ]
  
  # Convert the filtered data to numeric and ensure column names are retained
  filtered_data_numeric <- apply(filtered_data[, -ncol(filtered_data)], 2, as.numeric)
  
  # Ensure that the column names are properly retained after conversion
  colnames(filtered_data_numeric) <- colnames(filtered_data)[-ncol(filtered_data)]
  
  #filtered_data_numeric <- cbind(filtered_data_numeric, SampleID = sample_id)
  
  # Create a new flowFrame with the filtered numeric data
  filtered_flowFrame <- flowFrame(exprs = as.matrix(filtered_data_numeric), 
                                  description = description(fcs_transform[[i]]))
  
  
  # Store the filtered flowFrame in the list
  filtered_flowFrames[[i]] <- filtered_flowFrame
  
  
}

# Assign file names (from md) to the filtered_flowFrames list
#check if they are consistent
print(filtered_flowFrames[[i]]@description[["GUID"]])
print(md[["file_name"]])
#assign
names(filtered_flowFrames) <- md[["file_name"]]

#clustering

sce_multimer<- prepData(filtered_flowFrames, md=md, panel= panel, FACS = TRUE, transform=FALSE, md_cols =list(file="file_name", id="patient", factors=c("cells", "experiment", "experiment_cells")))

assayNames(sce_multimer)[1] <- "exprs"
sce_multimer <- cluster(sce_multimer, features="type", maxK=10, seed=7460)


sce_multimer <- runDR(sce_multimer, "UMAP", n_neighbors=100 , min_dist = 0.5, features = "type")


#defining number of metaclusters 

#Delta plot

delta_area(sce_multimer)


#All UMAPs
exprs <- assay(sce_multimer, "exprs")
exprs <- t(exprs)
exprs <- exprs[,c(marker_type)]
umap <- uwot::umap(exprs, n_neighbors=100, min_dist = 0.5, ret_model = TRUE)
reducedDim(sce_multimer, "UMAP")<- umap$embedding
set.seed(6754)
plotDR(sce_multimer, "UMAP", color_by="meta5")
plotDR(sce_multimer, "UMAP", color_by="meta6")
plotDR(sce_multimer, "UMAP", color_by="meta7")
plotDR(sce_multimer, "UMAP", color_by="meta8")
plotDR(sce_multimer, "UMAP", color_by="experiment")
plotDR(sce_multimer, "UMAP", color_by="sample_id")
plotDR(sce_multimer, "UMAP", color_by="meta8", facet_by = "experiment")
plotDR(sce_multimer, "UMAP", color_by="meta8", facet_by = "sample_id")
plotDR(sce_multimer, "UMAP", color_by="CD26")
plotDR(sce_multimer, "UMAP", color_by="CD73")
plotDR(sce_multimer, "UMAP", color_by="CCR7")
plotDR(sce_multimer, "UMAP", color_by="TIGIT")
plotDR(sce_multimer, "UMAP", color_by="CD39")
plotDR(sce_multimer, "UMAP", color_by="CD40L")
plotDR(sce_multimer, "UMAP", color_by="Perforin")
plotDR(sce_multimer, "UMAP", color_by="HLA-DR")

plotExprHeatmap(sce_multimer, features = "type", by="cluster_id", k="meta8", scale = "never", q = 0, perc=TRUE, bars = FALSE)
plotExprHeatmap(sce_multimer, features = "type", by="cluster_id", k="meta8", scale = "last", q = 0, perc=TRUE, bars = FALSE)

#preparing data for MEM annotation
cluster <- metadata(sce_multimer)$cluster_codes$meta8[match(colData(sce_multimer)$cluster_id, metadata(sce_multimer)$cluster_codes$som100)]
exprs_matrix_with_meta <- cbind(exprs, cluster = cluster)
exprs_matrix_with_meta <- as.data.frame(exprs_matrix_with_meta)

#MEM

mem_values <- MEM(exprs_matrix_with_meta, transform=FALSE, markers ="1:11,13:21,23:31,34")

build_heatmaps(mem_values, only.MEMheatmap = TRUE, labels = TRUE, output.files=TRUE)

