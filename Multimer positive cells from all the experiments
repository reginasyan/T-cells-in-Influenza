```{r , message=FALSE}
#installing libraries
set.seed(123)
library(flowCore)
library(flowViz)
library(flowVS)
library(flowAI)
library(PeacoQC)
library(CATALYST)
library(CytoNorm)
library(SingleCellExperiment)
library(uwot)
library(knitr)
library(xlsx)
library("flowCore")
library("flowCut")
library(ggcyto)
library(cytoMEM)
#library(scater) 
#library(scran)  
library("diffcyt")
library(dplyr)
library(flowViz)
library(flowDensity)
```

```{r All directories, message=FALSE}
setwd("~/Regina/IVA")

fcs_dir<- file.path(getwd(), "02_data/other_patients/Multimer") 
dir_transform <- file.path(getwd(), "02_data/other_patients/Multimer/transformed")
dir_QC <- file.path(getwd(),"02_data/other_patients/Multimer/after_QC")
```

```{r, message=FALSE}


# Function to extract and standardize column names
standardize_column_names <- function(col_names) {
  col_names %>%
    gsub("FJComp-", "", .) %>%  # Remove "FJComp-"
    tolower() %>%               # Convert to lowercase
    gsub("[^a-zA-Z0-9_]", "_", .) %>%  # Replace special characters with "_"
    make.names(unique = TRUE)   # Ensure valid and unique column names
}

# Load and process FCS files into a flowSet with unified column names
load_fcs_as_flowset <- function(fcs_dir) {
  fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)
  
  if (length(fcs_files) == 0) {
    stop("No FCS files found in the specified directory: ", fcs_dir)
  }
  
  # Read all files and store them as a named list of flowFrames
  flow_frames <- setNames(lapply(fcs_files, function(file) {
    fcs_data <- read.FCS(file, transformation = FALSE, truncate_max_range = FALSE)
    colnames(fcs_data) <- standardize_column_names(colnames(fcs_data))  # Standardize column names
    return(fcs_data)
  }), basename(fcs_files))  # Name each flowFrame with its file name
  
  # Get the union of all column names across files
  all_columns <- unique(unlist(lapply(flow_frames, colnames)))

  # Ensure all flowFrames have the same column names
  flow_frames <- lapply(flow_frames, function(f) {
    missing_cols <- setdiff(all_columns, colnames(f))
    if (length(missing_cols) > 0) {
      for (col in missing_cols) {
        f <- cbind(f, matrix(NA, nrow = nrow(f), ncol = 1))  # Add missing columns as NA
        colnames(f)[ncol(f)] <- col
      }
    }
    return(f)
  })

  # Convert to a flowSet and assign sample names
  flow_set <- as(flow_frames, "flowSet")
  sampleNames(flow_set) <- names(flow_frames)  # Assign file names to flowSet samples

  return(flow_set)
}


# Load FCS files into a unified flowSet with file names
fcs_data <- load_fcs_as_flowset(fcs_dir)


#all_files <- list.files(path = fcs.dir, pattern = "\\.fcs$", full.names = TRUE)
#filtered_files <- all_files[!grepl("CD8\\+Multimer\\+", all_files) & !grepl("Ex Vivo", all_files)]
#fcs_data <- read.flowSet(files = filtered_files, transformation = FALSE, truncate_max_range = FALSE)
```

```{r, message=FALSE}
# data frame of the panel
fcs_colname <- colnames(fcs_data)
marker_class <- rep("none", ncol(fcs_data[[1]]))
marker_type <- c(8:12,14:17,21:23,26:28,32:36,38:40)
marker_class[marker_type] <- "type" # markers that indicate surface markers, such as CD3, CD4, or markers that you do want to use for clustering
marker_class <- factor(marker_class, levels=c("type", "none"))
antigen <- pData(parameters(fcs_data[[1]]))$desc
panel <- data.frame(fcs_colname, antigen, marker_class, row.names = NULL)
```

```{r, message=FALSE}
#creating the metadata
files <- list.files(fcs_dir, 
                    pattern = "fcs",
                    full.names = TRUE)
file_name <- fsApply(fcs_data, identifier)
md <- data.frame(file_name = file_name)
md$sample_id <- gsub("\\.fcs", "", basename(md$file_name))
md$patient_id <- sapply(strsplit(md$sample_id, " - "), function(x) x[1])
md$experiment <- sapply(strsplit(md$sample_id, " - "), function(x) x[2])
md$cells <- sapply(strsplit(md$sample_id, " - "), function(x) x[3])
md$experiment_cells <- paste(md$experiment, md$cells, sep = "_")
rownames(md)  <- NULL
kable(md)
```

```{r, message=FALSE}
#downsample the data
markerstotransform <- panel$fcs_colname[c(8:28,31:43)] 
```

```{r arcsinh transformation, message=FALSE}
#tranform the data with FlowVS

cofactors <- readRDS(file = "C:/Users/Admin/Documents/Regina/IVA/04_exports/cofactors.rds")
cofactordata <- data.frame(markerstotransform, cofactors)
fcs_transform <- transFlowVS(fcs_data, channels = markerstotransform, cofactors)
```

```{r Logicle transformation, NOT USED}
#User defined logicle function for 1 flowFrame to optimize param
#lgcl <- logicleTransform(w = 0.3, t=10000, m =2.5, a=0.5)
#trans <- transformList(markerstotransform, lgcl)
#fcs_transform <- transform(fcs_data, trans) #transform all samples
#Validation of the transformed channels
#autoplot(fcs_data[[2]]) 
#autoplot(fcs_transform[[2]]) 
#filenames <- paste(fcs_data@phenoData@data$name)
#sampleNames(fcs_transform) <- filenames
#Save logicle_transformed FCS files

#write.flowSet(fcs_transform, outdir = file.path(dir_transform), filename = filenames) 
```

```{r flowCut Ha pipeline}

#2.flowCut for flowSet CD3_lgcl
fcs_QC<-flowCore::fsApply(fcs_transform, function(x)flowCut(x)) 
fcs_QC   #show everything

#3 Identify flowFrames with removed events based on the above info
fcs_QC$'24-057 - CD14+ - CD8+.fcs'$data   #Live death channel: not important
fcs_QC$'24-060 - CD14+ - CD8+.fcs'$data   #unknown channel?

#Plots to see the removed events in worst channels
fcs_QC$'24-057 - CD14+ - CD8+.fcs'$data  
plotDens(fcs_transform$'24-075 - Ex Vivo - CD8+.fcs', c("time","buv395_a"),main="24-075 - Ex Vivo - CD8+.fcs")
points(exprs(fcs_transform$'24-075 - Ex Vivo - CD8+.fcs')[fcs_QC$'24-075 - Ex Vivo - CD8+.fcs'$ind, c("time","buv395_a")], pch=".")



#4.Convert flowCut list to a flowSet
files <- list() 
for(x in 1:length(fcs_QC)){
  files<-append(files,list(fcs_QC[[x]]$frame))
}
fcs_QC<-flowSet(files)

#5. Save if flowCut removed any events
filenames <- paste(fcs_data@phenoData@data$name)
write.flowSet(fcs_QC, outdir = file.path(dir_QC), filename = filenames)

#6. Read
fcs_QC <- read.flowSet(path=file.path(dir_QC), pattern="*.fcs", transformation = FALSE, truncate_max_range = FALSE)
dim <- lapply(fcs_QC@frames, dim)
```

```{r flowCut QC}


for (i in 1:15) {
  # Get the filename for the i-th FCS file
  file_name <- basename(fcs_transform[[i]]@description$FILENAME)
  
  # Access the parameters and update the 'desc' field
  #fcs_transform[[i]]@parameters@data[["desc"]] <- fcs_transform[[i]]@parameters@data[["name"]]
  
  # Apply the flowCut function for each sample
  res_flowCut <- flowCut(fcs_transform[[i]], FileID = file_name, Plot = "All", Segment = 1000)
  
}
  

```

```{r Gating Multimer+ cells}
#create the gating strategy for Multimer+ cells
autoplot(fcs_QC, "pe_a", "cfluor_b548_a")

#1. Gating for patient 24-060
rectGate <- rectangleGate(filterId = "Multimer+", "pe_a"=c(1.5, Inf), "cfluor_b548_a"=c(0.75, Inf))
#create the gating set
gs <- GatingSet(fcs_QC[4:7])
gs_pop_add(gs, rectGate, parent = "root")
recompute(gs)

autoplot(gs, "Multimer+")

#2. Gating for patient 24-073
rectGate <- rectangleGate(filterId = "Multimer+", "pe_a"=c(1.7, Inf), "cfluor_b548_a"=c(0.75, Inf))

#create the gating set
gs <- GatingSet(fcs_QC[8:11])
gs_pop_add(gs, rectGate, parent = "root")
recompute(gs)

autoplot(gs, "Multimer+")

autoplot(gs, "Multimer+")

#3. Gating for patient 24-057
rectGate <- rectangleGate(filterId = "Multimer+", "pe_a"=c(1.8, Inf), "cfluor_b548_a"=c(0.75, Inf))

#create the gating set
gs <- GatingSet(fcs_QC[1:3])
gs_pop_add(gs, rectGate, parent = "root")
recompute(gs)

autoplot(gs, "Multimer+")

#4. Gating for patient 24-075
rectGate <- rectangleGate(filterId = "Multimer+", "pe_a"=c(1.8, Inf), "cfluor_b548_a"=c(0.75, Inf))

#create the gating set
gs <- GatingSet(fcs_QC[12:15])
gs_pop_add(gs, rectGate, parent = "root")
recompute(gs)

autoplot(gs, "Multimer+")


```



```{r Filtering Multimer+ cells, message=FALSE}
#filtering Multimer+ cells
filtered_flowFrames <- list()

for (i in seq_along(fcs_QC)) {
  # Access the expression data from the current flowFrame
  exprs_data <- exprs(fcs_QC[[i]])
  rownames(exprs_data) <- 1:nrow(exprs_data)
  
  # Get the sample name using sampleNames() or other methods
  sample_id <- sampleNames(fcs_QC)[i]
  
  # Create a gating column to classify cells
  gating <- rep("Non-multimer", nrow(exprs_data))  # Initialize all as Non-multimer
  
  # Apply threshold for sample "24-060"
  if (grepl("24-060", sample_id)) {
    gating[exprs_data[, "pe_a"] >= 1.5 & exprs_data[, "cfluor_b548_a"] > 0.75] <- "Multimer+"  # Apply threshold
  } else if (grepl("24-073", sample_id)) {
    # Apply threshold for sample "24-073"
    gating[exprs_data[, "pe_a"] >= 1.7 & exprs_data[, "cfluor_b548_a"] > 0.75] <- "Multimer+"
  } else if (grepl("24-057", sample_id)) {
    # Apply threshold for sample "24-073"
    gating[exprs_data[, "pe_a"] >= 1.8 & exprs_data[, "cfluor_b548_a"] > 0.75] <- "Multimer+"
  } else if (grepl("24-075", sample_id)) {
    # Apply threshold for sample "24-073"
    gating[exprs_data[, "pe_a"] >= 1.8 & exprs_data[, "cfluor_b548_a"] > 0.75] <- "Multimer+"}
  
  # Add the gating result as a new column to the expression matrix
  exprs_data <- cbind(exprs_data, gating)  # Add gating as new column
  # Filter for Multimer+ cells only
  #filtered_data <- exprs_data[exprs_data[, ncol(exprs_data)] == "Multimer+", ]
  
  
  # Filter for Multimer+ cells only
  filtered_data <- exprs_data[exprs_data[, "gating"] == "Multimer+", ]
  
  # Convert the filtered data to numeric and ensure column names are retained
  filtered_data_numeric <- apply(filtered_data[, -ncol(filtered_data)], 2, as.numeric)
  
  # Ensure that the column names are properly retained after conversion
  colnames(filtered_data_numeric) <- colnames(filtered_data)[-ncol(filtered_data)]
  
  #filtered_data_numeric <- cbind(filtered_data_numeric, SampleID = sample_id)
  
  # Create a new flowFrame with the filtered numeric data
  filtered_flowFrame <- flowFrame(exprs = as.matrix(filtered_data_numeric), 
                                  description = description(fcs_QC[[i]]))
  
  
  # Store the filtered flowFrame in the list
  filtered_flowFrames[[i]] <- filtered_flowFrame
  
  
}
```

```{r}
# Assign file names (from md) to the filtered_flowFrames list
#check if they are consistent
print(filtered_flowFrames[[i]]@description[["GUID"]])
print(md[["file_name"]])
#assign
names(filtered_flowFrames) <- md[["file_name"]]
```

```{r}
#clustering

sce_multimer<- prepData(filtered_flowFrames, md=md, panel= panel, FACS = TRUE, transform=FALSE, md_cols =list(file="file_name", id="patient_id", factors=c("cells", "experiment", "patient_id","experiment_cells")))

assayNames(sce_multimer)[1] <- "exprs"
sce_multimer <- cluster(sce_multimer, features="type", maxK=10, seed=7460)


sce_multimer <- runDR(sce_multimer, "UMAP", n_neighbors=100 , min_dist = 0.5, features = "type")
```

```{r}
#defining number of metaclusters 

#Delta plot

delta_area(sce_multimer)

```

```{r}
#All UMAPs
exprs <- assay(sce_multimer, "exprs")
exprs <- t(exprs)
exprs <- exprs[,c(marker_type)]
umap <- uwot::umap(exprs, n_neighbors=100, min_dist = 0.5, ret_model = TRUE)
reducedDim(sce_multimer, "UMAP")<- umap$embedding
set.seed(6754)
plotDR(sce_multimer, "UMAP", color_by="meta4")
plotDR(sce_multimer, "UMAP", color_by="meta5")
plotDR(sce_multimer, "UMAP", color_by="meta6")
plotDR(sce_multimer, "UMAP", color_by="meta7")
plotDR(sce_multimer, "UMAP", color_by="experiment")
plotDR(sce_multimer, "UMAP", color_by="sample_id")
plotDR(sce_multimer, "UMAP", color_by="meta6", facet_by = "experiment")
plotDR(sce_multimer, "UMAP", color_by="meta6", facet_by = "sample_id")
plotDR(sce_multimer, "UMAP", color_by="CD26")
plotDR(sce_multimer, "UMAP", color_by="CD73")
plotDR(sce_multimer, "UMAP", color_by="CCR7")
plotDR(sce_multimer, "UMAP", color_by="TIGIT")
plotDR(sce_multimer, "UMAP", color_by="CD39")
plotDR(sce_multimer, "UMAP", color_by="CD40L")
plotDR(sce_multimer, "UMAP", color_by="Perforin")
plotDR(sce_multimer, "UMAP", color_by="HLA-DR")
```

```{r}
plotExprHeatmap(sce_multimer, features = "type", by="cluster_id", k="meta6", scale = "never", q = 0, perc=TRUE, bars = FALSE)
plotExprHeatmap(sce_multimer, features = "type", by="cluster_id", k="meta6", scale = "last", q = 0, perc=TRUE, bars = FALSE)
```

```{r}
#preparing data for MEM annotation
cluster <- metadata(sce_multimer)$cluster_codes$meta6[match(colData(sce_multimer)$cluster_id, metadata(sce_multimer)$cluster_codes$som100)]
exprs_matrix_with_meta <- cbind(exprs, cluster = cluster)
exprs_matrix_with_meta <- as.data.frame(exprs_matrix_with_meta)
```

```{r}
#MEM

mem_values <- MEM(exprs_matrix_with_meta, transform=FALSE)

build_heatmaps(mem_values, only.MEMheatmap = TRUE, labels = TRUE, output.files=TRUE)
```

```{r}
#PCA
colnames(colData(sce_multimer))[colnames(colData(sce_multimer)) == "experiment"] <- "condition"
#colnames(colData(sce_multimer))[colnames(colData(sce_multimer)) == "patient"] <- "patient_id"


colData(sce_multimer)$sample_id <- paste0(
  colData(sce_multimer)$sample_id, "_", 
  colData(sce_multimer)$condition
)

sce_multimer$sample_id <- as.factor(sce_multimer$sample_id)


clrDR(sce_multimer,dr = "PCA", by = "cluster_id", k = "meta6", size_by = FALSE)

pbMDS(sce_multimer, by = "both", k = "meta6", features = "type",
     shape_by = "condition", size_by = TRUE)


colnames(colData(sce_multimer))[colnames(colData(sce_multimer)) == "patient_id.1"] <- "patient_id"
clrDR(sce_multimer, dr = "PCA", by = "sample_id", k = "meta6",label_by ="patient_id", size_by = FALSE)
```

```{r}
plotAbundances(sce_multimer, k = "meta6", by = "cluster_id", 
               group_by = "condition", shape_by = "patient_id")

sce_multimer_subset <- sce_multimer[, colData(sce_multimer)$patient_id == "24-060"]

plotAbundances(sce_multimer_subset, k = "meta6", by = "cluster_id", 
               group_by = "condition")


plotPbExprs(sce_multimer, facet_by = "antigen", ncol = 7, features="type")
```

```{r}
#Differential analysis
# create design & contrast matrix
design <- createDesignMatrix(ei(sce_multimer), cols_design = "condition")
contrast <- createContrast(c(0, 1))

# test for
# - differential abundance (DA) of clusters
# - differential states (DS) within clusters
res_DA <- diffcyt(sce_multimer, clustering_to_use = "meta6",
                  analysis_type = "DA", method_DA = "diffcyt-DA-edgeR",
                  design = design, contrast = contrast, verbose = FALSE)
res_DS <- diffcyt(sce_multimer, clustering_to_use = "meta6",
                  analysis_type = "DS", method_DS = "diffcyt-DS-limma",
                  design = design, contrast = contrast, verbose = FALSE)

# extract result tables
tbl_DA <- rowData(res_DA$res)
tbl_DS <- rowData(res_DS$res)
```





