# set seed and install libraries
set.seed(123)
library(flowCore)
library(flowViz)
library(flowVS)
library(flowAI)
library(PeacoQC)
library(CATALYST)
library(CytoNorm)
library(SingleCellExperiment)
library(uwot)
library(knitr)
library(xlsx)
library("flowCore")
library("flowCut")
library(ggcyto)
library(clustree)

#directories

setwd("~/Regina/IVA")

fcs.dir<- file.path(getwd(), "02_data/patient_2_3/Multimer") 
fcs_data <- read.flowSet(path=fcs.dir, pattern="*.fcs", transformation = FALSE, truncate_max_range = FALSE)


# data frame of the panel

fcs_colname <- colnames(fcs_data)
marker_class <- rep("none", ncol(fcs_data[[1]]))
marker_type <- c(8:28,31:43)
marker_class[marker_type] <- "type" # markers that indicate surface markers, such as CD3, CD4, or markers that you do want to use for clustering
marker_class <- factor(marker_class, levels=c("type", "none"))
antigen <- pData(parameters(fcs_data[[1]]))$desc

panel <- data.frame(fcs_colname, antigen, marker_class, row.names = NULL)
write.xlsx(panel, file="C:/Users/Admin/Documents/Regina/IVA/04_exports/panel.xlsx", sheetName="Panel")


#creating the metadata
files <- list.files("./02_data/patient_2_3/Multimer", 
                    pattern = "fcs",
                    full.names = TRUE)
file_name <- fsApply(fcs_data, identifier)
md <- data.frame(file_name = file_name)
md$sample_id <- gsub("\\.fcs", "", basename(md$file_name))
md$patient <- sapply(strsplit(md$sample_id, " - "), function(x) x[1])
md$experiment <- sapply(strsplit(md$sample_id, " - "), function(x) x[2])
md$cells <- sapply(strsplit(md$sample_id, " - "), function(x) x[3])
md$experiment_cells <- paste(md$experiment, md$cells, sep = "_")
rownames(md)  <- NULL
kable(md)

fcs_data <- fcs_data[c(1,3,5,7,9,11)] #only total CD8+ cells
md <- md[c(1,3,5,7,9,11),] #only total CD8+ cells

#downsample the data
markerstotransform <- panel$fcs_colname[c(8:28,31:43)] 

Downsampling_FlowSet <- function(x, samplesize , replace=FALSE, prob=NULL){
  if(missing(samplesize))
    samplesize <- min(flowCore::fsApply(x,nrow))
  flowCore::fsApply(x, function(ff){
    i <- sample(nrow(ff), size = samplesize, replace=replace, prob)
    ff[i,]
  })
}

fcs_data_small <- Downsampling_FlowSet(x=fcs_data, samplesize = 2000)

#inspect the data to decide which type of transformation suits better
expression_data <- fcs_data[[1]]
expression_data <- expression_data@exprs


#tranform the data with FlowVS
cofactors <- estParamFlowVS(fcs_data_small, channels=markerstotransform)
saveRDS(cofactors, file = "C:/Users/Admin/Documents/Regina/IVA/04_exports/cofactors.rds")
cofactors <- readRDS(file = "C:/Users/Admin/Documents/Regina/IVA/04_exports/cofactors.rds")
cofactordata <- data.frame(markerstotransform, cofactors)
write.csv(x=cofactordata, file="C:/Users/Admin/Documents/Regina/IVA/04_exports/cofactordata_Multimer_CD8+.csv") #csv file
write.xlsx(x=cofactordata, file="C:/Users/Admin/Documents/Regina/IVA/04_exports/cofactordata_Multimer_CD8+.xlsx", sheet="cofactordata_A")

fcs_transform <- transFlowVS(fcs_data, channels = markerstotransform, cofactors)
filenames <- sampleNames(fcs_data)
sampleNames(fcs_transform) <- filenames


# Open the PDF device
pdf("C:/Users/Admin/Documents/Regina/IVA/03_figures/Density_plot_transformation_FlowFS_cofactors_CD8+_in_multimer_experiment.pdf")

# Create the density plot
densityplot(~., fcs_data[[1]])
densityplot(~., fcs_transform[[1]])

# Close the PDF device to save the file
dev.off()

# Loop for the QC by flowCut
for (i in 1:6) {
  file_name <- basename(fcs_transform[[i]]@description$FILENAME)
  # Apply the flowCut function for each sample
  res_flowCut <- flowCut(fcs_transform[[i]], FileID = file_name, Plot = "All", Segment = 1000)
  
  # Optionally, print the result or save it
  print(paste("Results for sample", i))
  print(res_flowCut$data)
  
}


fcs_transform_down <- Downsampling_FlowSet(fcs_transform, samplesize =10000) # you can still downsample your training set if needed, but you can also include all or more cells

sce <- prepData(fcs_transform_down, md=md, panel= panel, FACS = TRUE, transform=FALSE, md_cols =list(file="file_name", id="patient", factors=c("cells", "experiment", "experiment_cells")))
assayNames(sce)[1] <- "exprs"

exprs <- assay(sce, "exprs")
exprs <- t(exprs)
exprs <- exprs[,c(marker_type)] #markers you want to use for clustering, you can also use marker_state or marker_type

set.seed(1234)

umap <- uwot::umap(exprs, n_neighbors=100, min_dist = 0.5, ret_model = TRUE)
reducedDim(sce, "UMAP")<- umap$embedding
plotDR(sce, "UMAP", color_by="experiment")


#Clustering data

sce<- prepData(fcs_transform_down, md=md, panel= panel, FACS = TRUE, transform=FALSE, md_cols =list(file="file_name", id="patient", factors=c("cells", "experiment", "experiment_cells")))

assayNames(sce)[1] <- "exprs"
sce <- CATALYST::cluster(sce, features="type", maxK=13, seed=1234)

sce <- runDR(sce, "UMAP", cells=10000, n_neighbors=100 , min_dist = 0.5, features = "type")


#defining number of metaclusters 

# Loop through the cluster_codes in sce@metadata$cluster_codes
for (k in names(sce@metadata$cluster_codes)) {
  # Assign each meta cluster (e.g., meta2, meta3, ...) to colData(sce)
  colData(sce)[[k]] <- sce@metadata$cluster_codes[[k]]
}

# Verify that the metacluster columns were added to colData
colnames(colData(sce))

clustree(sce, exprs="exprs", prefix = "meta")

#Delta plot

delta_data <- metadata(sce)$delta_area$data

# Rename columns if needed (k and y for clarity)
colnames(delta_data) <- c("k", "delta_area")

# Create the delta plot
library(ggplot2)
ggplot(delta_data, aes(x = k, y = delta_area)) +
  geom_line(color = "blue", size = 1) +
  geom_point(color = "red", size = 2) +
  labs(
    title = "Elbow Plot for FlowSOM Clustering",
    x = "Number of Clusters (k)",
    y = "Delta Area under the Curve"
  ) +
  theme_minimal()

#All UMAPs
set.seed(6754)
plotDR(sce, "UMAP", color_by="meta13")
plotDR(sce, "UMAP", color_by="meta13", facet_by = "experiment")
plotDR(sce, "UMAP", color_by="meta13", facet_by = "experiment")
plotDR(sce, "UMAP", color_by="meta13", facet_by = "sample_id")
